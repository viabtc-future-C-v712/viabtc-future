version: "3"
services:
  viabtcdealbase:
    image: viabtcdealbase
    build:
      context: .
      dockerfile: ./Dockerfile.base
    networks:
      viabtcdealnetwork:
        ipv4_address: 172.19.0.253  # 指定静态 IPv4 地址
  viabtcdealdev:
    image: viabtcdealdev
    tty: true
    entrypoint: ["bash", "-c", "/usr/src/myapp/build.sh"]
    build:
      context: .
      dockerfile: ./Dockerfile.dev
      # args:
      #   - http_proxy=socks5://172.26.96.209:1082
      #   - https_proxy=socks5://172.26.96.209:1082
    volumes:
      - .:/viabtc-deal
    healthcheck:
      test: ["CMD", "test", "-e", "/viabtc-deal/bin/readhistory.exe"]
      interval: 5s
      timeout: 1s
      retries: 30
    networks:
      viabtcdealnetwork:
        ipv4_address: 172.19.0.255  # 指定静态 IPv4 地址
    depends_on:
      - viabtcdealbase
  viabtcdeal:
    image: viabtcdeal
    tty: true
    command: ["/bin/bash", "-c", "/usr/src/myapp/start.sh"]
    build:
      context: .
      dockerfile: ./Dockerfile.app
    volumes:
      - ./:/viabtc-deal
    networks:
      viabtcdealnetwork:
        ipv4_address: 172.19.0.2
    ports:
      - "8080:8080"
      - "8090:8090"
    depends_on:
      viabtcdealdev:
        condition: service_healthy
      sentinel: 
        condition: service_healthy
      viabtcdb:
        condition: service_healthy
      kafka:
        condition: service_healthy
  viabtcdb:
    image: viabtcdb
    networks:
      viabtcdealnetwork:
        ipv4_address: 172.19.0.3  # 指定静态 IPv4 地址
    tty: true
    build:
      context: .
      dockerfile: ./Dockerfile.db
    environment:
      MYSQL_ROOT_PASSWORD: pass
    healthcheck:
      test: ["CMD", "mysql", "-u", "root", "-ppass", "-e", "SELECT 1"]
      interval: 5s
      timeout: 5s
      retries: 30
    ports:
      - "3306:3306"
    volumes:
      - ./sql/create_trade_history.sql:/docker-entrypoint-initdb.d/create_trade_history.sql
      - ./sql/create_trade_log.sql:/docker-entrypoint-initdb.d/create_trade_log.sql
      - ./sql/init_trade_history.sh:/docker-entrypoint-initdb.d/init_trade_history.sh
    # entrypoint: ["/docker-entrypoint-initdb.d/init_trade_history.sh"]
  redis-master:
    image: redis:latest
    command: redis-server --port 6379
    networks:
      viabtcdealnetwork:
        ipv4_address: 172.19.0.7  # 指定静态 IPv4 地址
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 30
    ports:
      - "6379:6379"
  redis-slave:
    image: redis:latest
    command: redis-server --port 6380 --slaveof redis-master 6379
    networks:
      viabtcdealnetwork:
        ipv4_address: 172.19.0.8  # 指定静态 IPv4 地址
    ports:
      - "6380:6380"
  sentinel:
    image: redis:latest
    command: redis-sentinel /etc/redis/sentinel.conf
    networks:
      viabtcdealnetwork:
        ipv4_address: 172.19.0.9  # 指定静态 IPv4 地址
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "sentinel", "get-master-addr-by-name", "mymaster"]
      interval: 5s
      timeout: 5s
      retries: 30
    ports:
      - "26379:26379"
    volumes:
      - ./conf/sentinel.conf:/etc/redis/sentinel.conf
    depends_on:
      - redis-master
      - redis-slave
    environment:
      - SENTINEL_DOWN_AFTER=5000
      - SENTINEL_FAILOVER=10000
      - SENTINEL_QUORUM=2
      - SENTINEL_MONITOR=mymaster redis-master 6379 2
    links:
      - redis-master
      - redis-slave
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      viabtcdealnetwork:
        ipv4_address: 172.19.0.5  # 指定静态 IPv4 地址
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      viabtcdealnetwork:
        ipv4_address: 172.19.0.6  # 指定静态 IPv4 地址
    container_name: kafka
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "(echo 'hello' | kafka-console-producer --bootstrap-server localhost:9092 --topic test) && (timeout 5 kafka-console-consumer --bootstrap-server localhost:9092 --topic test --from-beginning | grep -q 'hello')"]
      interval: 1s
      timeout: 10s
      retries: 30
    ports:
      - "9092:9092"
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092
      - KAFKA_BROKER_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=null
networks:
  viabtcdealnetwork:
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16  # 自定义 IP 地址池